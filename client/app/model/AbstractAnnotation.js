// Generated by CoffeeScript 1.8.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Ext.define('GSW.model.AbstractAnnotation', {
    extend: 'GSW.model.Base',
    fields: [
      {
        name: 'body',
        type: 'string',
        defaultValue: ''
      }, {
        name: 'bodyType',
        type: 'string',
        defaultValue: 'text'
      }, {
        name: 'target_uri',
        type: 'string'
      }, {
        name: 'targetType',
        type: 'string'
      }, {
        name: 'annotatedAt',
        type: 'int'
      }, {
        name: 'user_id',
        reference: 'User'
      }, {
        name: 'motivation',
        type: 'string',
        defaultValue: 'commenting'
      }, {
        name: 'tags',
        defaultValue: []
      }
    ],
    getURI: function() {
      return "http://smart-gs-web.org/annotations/" + this.id;
    },
    getAnnotatedAt: function() {
      return this.get('annotatedAt');
    },
    getBody: function() {
      return this.get('body');
    },
    getBodyType: function() {
      return Ext.Error.raise("not implemented");
    },
    getTargetURI: function() {
      return Ext.Error.raise("not implemented");
    },
    getTargetType: function() {
      return Ext.Error.raise("not implemented");
    },
    getMotivation: function() {
      return Ext.Error.raise("not implemented");
    },
    addTag: function(tag) {
      var tags;
      tags = this.get('tags');
      if (__indexOf.call(tags, tag) < 0) {
        return tags.push(tag);
      }
    },
    prefix: {
      oa: "http://www.w3.org/ns/oa#",
      cnt: "http://www.w3.org/2011/content#",
      dc: "http://purl.org/dc/elements/1.1/",
      dcterms: "http://purl.org/dc/terms/",
      dctypes: "http://purl.org/dc/dcmitype/",
      foaf: "http://xmlns.com/foaf/0.1/",
      prov: "http://www.w3.org/ns/prov#",
      rdf: "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
      rdfs: "http://www.w3.org/2000/01/rdf-schema#",
      skos: "http://www.w3.org/2004/02/skos/core#",
      trig: "http://www.w3.org/2004/03/trix/rdfg-1/",
      gsw: "http://smart-gs-web.org/ns#"
    },
    p: function(prefix, term) {
      if (!this.prefix[prefix]) {
        Ext.Error.raise("undefined prefix");
      }
      return this.prefix[prefix] + term;
    },
    toTriples: function() {
      var annotatedAt, body, motivation, serializedAt, serializedBy, tag, tagNodeName, tags, targetURI, triples, uri, user, userNodeName, _i, _len, _ref;
      triples = [];
      uri = this.getURI();
      body = "_:body-" + this.id;
      targetURI = this.getTargetURI();
      annotatedAt = this.wrapData(this.xsdDateTime(this.get('annotatedAt')));
      serializedBy = "SMART-GS-Web";
      serializedAt = this.wrapData(this.xsdDateTime(new Date().getTime()));
      user = this.getUser();
      userNodeName = "_:user-" + this.id;
      motivation = this.get('motivation');
      triples.push([uri, this.p("rdf", "type"), this.p("oa", "Annotation")]);
      triples.push([uri, this.p("oa", "hasBody"), body]);
      triples.push([uri, this.p("oa", "hasTarget"), targetURI]);
      triples.push([uri, this.p("oa", "annotatedBy"), userNodeName]);
      triples.push([uri, this.p("oa", "annotatedAt"), annotatedAt]);
      triples.push([uri, this.p("oa", "serializedBy"), serializedBy]);
      triples.push([uri, this.p("oa", "serializedAt"), serializedAt]);
      triples.push([uri, this.p("oa", "motivatedBy"), this.p("oa", motivation)]);
      triples.push([body, this.p("rdf", "type"), this.p("cnt", "ContentAsText")]);
      triples.push([body, this.p("dc", "format"), this.wrapData("text/plain")]);
      triples.push([body, this.p("cnt", "characterEncoding"), this.wrapData("utf-8")]);
      triples.push([body, this.p("cnt", "chars"), this.wrapData(this.get('body'))]);
      triples.push([userNodeName, this.p("rdf", "type"), this.p("foaf", "Person")]);
      triples.push([userNodeName, this.p("foaf", "name"), this.wrapData(user.get('name'))]);
      tags = this.get('tags');
      if (tags.length > 0) {
        triples.push([uri, this.p("oa", "motivatedAt"), this.p("oa", "tagging")]);
      }
      _ref = this.get('tags');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tag = _ref[_i];
        tagNodeName = "_:tag-" + tag;
        triples.push([uri, this.p("oa", "hasBody"), tagNodeName]);
        triples.push([tagNodeName, this.p("rdf", "type"), this.p("oa", "Tag")]);
        triples.push([tagNodeName, this.p("rdf", "type"), this.p("cnt", "ContextAsText")]);
        triples.push([tagNodeName, this.p("cnt", "characterEncoding"), this.wrapData("utf-8")]);
        triples.push([tagNodeName, this.p("dc", "format"), this.wrapData("text/plain")]);
        triples.push([tagNodeName, this.p("cnt", "chars"), this.wrapData(tag)]);
      }
      triples.push([serializedBy, this.p("rdf", "type"), this.p("prov", "SoftwareAgent")]);
      triples.push([serializedBy, this.p("foaf", "name"), this.wrapData("SMART-GS-Web")]);
      return triples;
    },
    write: function(callback) {
      var k, triple, v, writer, _i, _len, _ref, _ref1;
      writer = new window.N3.Writer();
      _ref = this.prefix;
      for (k in _ref) {
        v = _ref[k];
        writer.addPrefix(k, v);
      }
      _ref1 = this.toTriples();
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        triple = _ref1[_i];
        writer.addTriple(triple[0], triple[1], triple[2]);
      }
      return writer.end(callback);
    },
    xsdDateTime: function(dateInt) {
      var date, dd, hh, mm1, mm2, pad, ss, yyyy;
      date = new Date(dateInt);
      pad = function(n) {
        var s;
        s = n.toString();
        if (s.length < 2) {
          return "0" + s;
        } else {
          return s;
        }
      };
      yyyy = date.getFullYear();
      mm1 = pad(date.getMonth() + 1);
      dd = pad(date.getDate());
      hh = pad(date.getHours());
      mm2 = pad(date.getMinutes());
      ss = pad(date.getSeconds());
      return yyyy + "-" + mm1 + "-" + dd + "T" + hh + ":" + mm2 + ":" + ss;
    },
    wrapData: function(raw) {
      return '"' + raw + '"';
    }
  });

}).call(this);
