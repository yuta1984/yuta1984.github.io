// Generated by CoffeeScript 1.8.0
(function() {
  Ext.define('GSW.model.Image', {
    extend: 'GSW.model.Base',
    fields: [
      {
        name: 'title',
        type: 'string',
        defaultValue: ''
      }, {
        name: 'url',
        type: 'string',
        defaultValue: ''
      }, {
        name: 'url_thumbnail',
        type: 'string',
        defaultValue: ''
      }, {
        name: 'transcription',
        type: 'string',
        defaultValue: ''
      }, {
        name: 'translation',
        type: 'string',
        defaultValue: ''
      }, {
        name: 'notes',
        type: 'string',
        defaultValue: ''
      }, {
        name: 'manuscriptId',
        reference: 'Manuscript'
      }
    ],
    crop: function(x, y, w, h) {
      var params;
      params = {
        x: Math.ceil(x),
        y: Math.ceil(y),
        width: Math.ceil(w),
        height: Math.ceil(h),
        crop: 'crop'
      };
      return $.cloudinary.url(this.getFilename(), params);
    },
    getFilename: function() {
      var ary;
      ary = this.get('url').split('/');
      return ary[ary.length - 1];
    },
    update: function(attr, value) {
      this.set(attr, value);
      this.updateOnServer(attr, value);
      return this.notifyToGroup(attr, value);
    },
    notifyToGroup: function(attr, value) {
      var data;
      data = {
        type: "update:image",
        id: this.id,
        attrs: {}
      };
      data["attrs"][attr] = value;
      return TogetherJS.send(data);
    },
    updateOnServer: function(attr, value) {
      var params, url;
      url = this.buildURL() + ".json";
      params = {};
      params["image[" + attr + "]"] = value;
      return Ext.Ajax.request({
        method: 'PUT',
        withCredentials: true,
        cors: true,
        useDefaultXhrHeader: false,
        url: url,
        params: params,
        success: function(data) {
          return console.log(data);
        }
      });
    },
    statics: {
      fromJSON: function(data) {
        var config, image, region, regions;
        regions = data.regions ? (function() {
          var _i, _len, _ref, _results;
          _ref = data.regions;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            region = _ref[_i];
            _results.push(GSW.model.Region.fromJSON(region));
          }
          return _results;
        })() : [];
        config = {
          id: data._id.$oid,
          title: data.title,
          url: data.image_data.url,
          url_thumbnail: data.image_data.thumbnail.url,
          transcription: data.transcription || '',
          translation: data.translation || '',
          notes: data.note || ''
        };
        image = new this(config);
        image.regions().add(regions);
        Ext.getStore('GSW.store.ImageStore').add(image);
        return image;
      }
    },
    buildURL: function() {
      var manuscriptId, projectId, server;
      server = GSW.app.getServerURL();
      manuscriptId = this.manuscript.id;
      projectId = this.manuscript.project.id;
      return [server, "projects", projectId, "manuscripts", manuscriptId, "images", this.id].join("/");
    }
  });

}).call(this);
