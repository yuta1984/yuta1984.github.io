// Generated by CoffeeScript 1.8.0
(function() {
  Ext.define('GSW.model.Project', {
    extend: 'GSW.model.Base',
    fields: [
      {
        name: 'title',
        type: 'string',
        defaultValue: ''
      }, {
        name: 'description',
        type: 'string',
        defaultValue: ''
      }
    ],
    hasMany: [
      {
        name: 'admins',
        model: 'GSW.model.User',
        associationKey: 'admins'
      }, {
        name: 'contributors',
        model: 'GSW.model.User',
        associationKey: 'contributers'
      }, {
        name: 'manuscripts',
        model: 'GSW.model.Manuscript',
        associationKey: 'manuscripts'
      }
    ],
    toTreeModel: function() {
      var i, m, manuscrits, root;
      manuscrits = (function() {
        var _i, _len, _ref, _results;
        _ref = this.get('manuscripts');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          m = _ref[_i];
          _results.push({
            text: m.get('title'),
            leaf: false,
            children: (function() {
              var _j, _len1, _ref1, _results1;
              _ref1 = m.get('images');
              _results1 = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                i = _ref1[_j];
                _results1.push({
                  text: i.get('title'),
                  leaf: true,
                  url: i.get('url'),
                  model: i,
                  type: 'image'
                });
              }
              return _results1;
            })()
          });
        }
        return _results;
      }).call(this);
      root = {
        text: 'ROOT',
        expanded: true,
        children: [
          {
            text: "Manuscripts",
            children: manuscrits
          }, {
            text: "Location/Map",
            expanded: false,
            children: [
              {
                leaf: true,
                text: "Kyoto",
                type: "map"
              }
            ]
          }, {
            text: "People",
            expanded: false,
            children: [
              {
                leaf: true,
                text: "Button.js"
              }
            ]
          }, {
            text: "Datetime",
            expanded: false,
            children: [
              {
                leaf: true,
                text: "Button.js"
              }
            ]
          }
        ]
      };
      return root;
    },
    statics: {
      fromJSON: function(data) {
        var admin, admins, con, config, contributors, description, man, manuscripts, name, owner;
        name = data.name;
        description = data.description;
        owner = GSW.model.User.fromJSON(data.owner);
        admins = (function() {
          var _i, _len, _ref, _results;
          _ref = data.admins;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            admin = _ref[_i];
            _results.push(GSW.model.User.fromJSON(admin));
          }
          return _results;
        })();
        contributors = (function() {
          var _i, _len, _ref, _results;
          _ref = data.contributors;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            con = _ref[_i];
            _results.push(GSW.model.User.fromJSON(con));
          }
          return _results;
        })();
        manuscripts = (function() {
          var _i, _len, _ref, _results;
          _ref = data.manuscripts;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            man = _ref[_i];
            _results.push(GSW.model.Manuscript.fromJSON(man));
          }
          return _results;
        })();
        config = {
          id: data._id.$oid,
          name: name,
          owner: owner,
          admins: admins,
          contributors: contributors,
          manuscripts: manuscripts
        };
        return new this(config);
      }
    }
  });

}).call(this);
