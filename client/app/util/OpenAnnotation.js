// Generated by CoffeeScript 1.8.0
(function() {
  Ext.define('GSW.util.OpenAnnotation', {
    prefix: function() {
      return {
        oa: "http://www.w3.org/ns/oa#",
        cnt: "http://www.w3.org/2011/content#",
        dc: "http://purl.org/dc/elements/1.1/",
        dcterms: "http://purl.org/dc/terms/",
        dctypes: "http://purl.org/dc/dcmitype/",
        foaf: "http://xmlns.com/foaf/0.1/",
        prov: "http://www.w3.org/ns/prov#",
        rdf: "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
        rdfs: "http://www.w3.org/2000/01/rdf-schema#",
        skos: "http://www.w3.org/2004/02/skos/core#",
        trig: "http://www.w3.org/2004/03/trix/rdfg-1/",
        gsw: "http://smart-gs-web.org/ns#"
      };
    },
    p: function(prefix, term) {
      if (!this.prefix()[prefix]) {
        Ext.Error.raise("undefined prefix");
      }
      return this.prefix()[prefix] + ":" + term;
    },
    write: function(anno, callback) {
      var annotatedAt, annotatedBy, body, bodyType, format, k, motivation, serializedAt, serializedBy, targetType, targetURI, uri, v, writer, _ref;
      uri = anno.getURI();
      body = this.p("gsw", anno.id);
      targetURI = anno.getTargetURI();
      annotatedAt = this.wrapData(this.xsdDateTime(anno.get('annotatedAt')));
      serializedBy = "SMART-GS-Web";
      serializedAt = this.wrapData(this.xsdDateTime(new Date));
      annotatedBy = "_:" + anno.get('annotatedBy_id');
      motivation = anno.get('motivation');
      writer = new window.N3.Writer();
      _ref = this.prefix();
      for (k in _ref) {
        v = _ref[k];
        writer.addPrefix(k, v);
      }
      writer.addTriple(uri, this.p("rdf", "type"), this.p("oa", "Annotation"));
      writer.addTriple(uri, this.p("oa", "hasBody"), body);
      writer.addTriple(uri, this.p("oa", "hasTarget"), targetURI);
      writer.addTriple(uri, this.p("oa", "annotatedBy"), annotatedBy);
      writer.addTriple(uri, this.p("oa", "annotatedAt"), annotatedAt);
      writer.addTriple(uri, this.p("oa", "serializedBy"), serializedBy);
      writer.addTriple(uri, this.p("oa", "serializedAt"), serializedAt);
      writer.addTriple(uri, this.p("oa", "motivatedAt"), this.p("oa", motivation));
      writer.addTriple(annotatedBy, this.p("rdf", "type"), this.p("foaf", "Person"));
      writer.addTriple(annotatedBy, this.p("foaf", "name"), this.wrapData("dummy user"));
      switch (anno.getTargetType()) {
        case "xml":
          targetType = this.p("dctypes", "Text");
          format = this.wrapData("text/xml");
          break;
        case "image":
          targetType = this.p("dctypes", "Image");
          break;
        default:
          targetType = this.p("dctypes", "Text");
          format = this.wrapData("text/xml");
      }
      writer.addTriple(targetURI, this.p("rdf", "type"), targetType);
      if (format) {
        writer.addTriple(targetURI, this.p("dc", "format"), format);
      }
      switch (anno.getBodyType()) {
        case "text":
          bodyType = this.p("cnt", "ContentAsText");
          break;
        case "tag":
          bodyType = this.p("oa", "Tag");
      }
      writer.addTriple(targetURI, this.p("rdf", "type"), targetType);
      writer.addTriple(targetURI, this.p("cnt", "characterEncoding"), this.wrapData("utf-8"));
      writer.addTriple(targetURI, this.p("dc", "format"), this.wrapData("text/plain"));
      writer.addTriple(targetURI, this.p("cnt", "chars"), this.wrapData(anno.getBody()));
      writer.addTriple(serializedBy, this.p("rdf", "type"), this.p("prov", "SoftwareAgent"));
      writer.addTriple(serializedBy, this.p("foaf", "name"), this.wrapData("SMART-GS-Web"));
      return writer.end(function(err, res) {
        return callback(res);
      });
    },
    xsdDateTime: function(dateInt) {
      var date, dd, hh, mm1, mm2, pad, ss, yyyy;
      date = new Date(dateInt);
      pad = function(n) {
        var s;
        s = n.toString();
        if (s.length < 2) {
          return "0" + s;
        } else {
          return s;
        }
      };
      yyyy = date.getFullYear();
      mm1 = pad(date.getMonth() + 1);
      dd = pad(date.getDate());
      hh = pad(date.getHours());
      mm2 = pad(date.getMinutes());
      ss = pad(date.getSeconds());
      return yyyy + "-" + mm1 + "-" + dd + "T" + hh + ":" + mm2 + ":" + ss;
    },
    wrapData: function(raw) {
      return '"' + raw + '"';
    }
  });

}).call(this);
