// Generated by CoffeeScript 1.8.0
(function() {
  Ext.define('GSW.view.transcription.CanvasPanel', {
    extend: 'Ext.panel.Panel',
    requires: ['GSW.view.transcription.state.DefaultState', 'GSW.view.transcription.state.DrawingState', 'GSW.view.transcription.state.ImageAnnotationState', 'GSW.view.transcription.state.ImageSelectionState', 'GSW.view.transcription.SourcePanel', 'GSW.util.XmlFormatter', 'GSW.util.OpenAnnotation'],
    xtype: "canvas-panel",
    bodyBorder: false,
    bodyPadding: 0,
    bodyMargin: 0,
    layout: 'fit',
    constructor: function(config) {
      return this.callParent(arguments);
    },
    listeners: {
      afterrender: function() {
        return this.setupCanvas();
      },
      resize: function() {
        return this.resize();
      }
    },
    dockedItems: [
      {
        dock: 'top',
        xtype: 'toolbar',
        border: 1,
        style: {
          'background-color': "rgb(235,235,235)"
        },
        items: [
          {
            iconCls: null,
            text: 'Show source',
            xtye: 'splitbutton',
            menu: [
              {
                text: "TEI",
                handler: function() {
                  var src, tab, tabpanel, title;
                  src = GSW.util.XmlFormatter.format(this.up("canvas-panel").getTeiSource());
                  title = "TEI src: " + (this.up('transcription-panel').getTitle());
                  tab = Ext.create("GSW.view.transcription.SourcePanel", {
                    title: title
                  });
                  tab.setSource(src);
                  tabpanel = Ext.getCmp("content-tabpanel");
                  tabpanel.add(tab);
                  return tabpanel.setActiveTab(tab);
                }
              }, {
                text: "Open Annotation",
                handler: function() {
                  var a, annotations, generator, src, tab, tabpanel, title, _i, _len;
                  annotations = this.up("canvas-panel").surf.get('annotations');
                  generator = Ext.create("GSW.util.OpenAnnotation");
                  src = "";
                  for (_i = 0, _len = annotations.length; _i < _len; _i++) {
                    a = annotations[_i];
                    generator.write(a, function(str) {
                      return src += str;
                    });
                  }
                  title = "annotations: " + (this.up('transcription-panel').getTitle());
                  tab = Ext.create("GSW.view.transcription.SourcePanel", {
                    title: title
                  });
                  src = $("<pre />").text(src).html();
                  src = src.split("\n").join("<br/>");
                  tab.setSource(src);
                  tabpanel = Ext.getCmp("content-tabpanel");
                  tabpanel.add(tab);
                  return tabpanel.setActiveTab(tab);
                }
              }
            ]
          }, '-', {
            iconCls: null,
            text: 'Region',
            xtye: 'splitbutton',
            menu: [
              {
                text: "Add",
                handler: function() {
                  return this.up("canvas-panel").switchState("selection");
                }
              }, {
                text: "Remove"
              }
            ]
          }
        ]
      }
    ],
    setupCanvas: function() {
      var canvasId, options;
      canvasId = "canvas-" + (this.getId());
      this.setHtml("<canvas id=" + canvasId + " width='900' height='900'></canvas>");
      options = {
        selection: false
      };
      this.c = new fabric.Canvas(canvasId, options);
      this.bindEventListeners();
      this.setupStates();
      this.zoom = 1.0;
      this.setZoom(this.zoom);
      return setTimeout((function(_this) {
        return function() {
          return _this.showRegions();
        };
      })(this), 1000);
    },
    setupStates: function() {
      this.currentState = 'default';
      return this.states = {
        "default": Ext.create('GSW.view.transcription.state.DefaultState', {
          canvas: this
        }),
        drawing: Ext.create('GSW.view.transcription.state.DrawingState', {
          canvas: this
        }),
        annotating: Ext.create('GSW.view.transcription.state.ImageAnnotationState', {
          canvas: this
        }),
        selection: Ext.create('GSW.view.transcription.state.ImageSelectionState', {
          canvas: this
        })
      };
    },
    getImageModel: function() {
      return this.up('transcription-panel').image;
    },
    showRegions: function() {
      var image, model, obj, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.c.getObjects();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        obj = _ref[_i];
        if ((obj != null ? obj.type : void 0) === 'region') {
          this.c.remove(obj);
        }
      }
      console.log("adding regions");
      image = this.getImageModel();
      _ref1 = image.regions().data.items;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        model = _ref1[_j];
        this.showRegion(model);
      }
      return this.c.renderAll();
    },
    showRegion: function(model) {
      var region;
      region = new fabric.Region({
        canvas: this.c
      });
      region.set('left', model.get('x'));
      region.set('top', model.get('y'));
      region.set('width', model.get('w'));
      region.set('height', model.get('h'));
      region.model = model;
      model.view = region;
      this.attatchAnnotationPanel(model);
      return this.c.add(region);
    },
    attatchAnnotationPanel: function(regionModel) {
      return Ext.create('GSW.view.transcription.ImageAnnotationPanel', {
        target: regionModel.view,
        canvas: this,
        model: regionModel
      });
    },
    getState: function() {
      return this.states[this.currentState] || this.states["default"];
    },
    switchState: function(name) {
      if (this.states[name]) {
        this.currentState = name;
        return this.states[name].onSwitchState();
      }
    },
    resetState: function() {
      return this.switchState("default");
    },
    bindEventListeners: function() {
      this.c.on("after:render", (function(_this) {
        return function() {
          return _this.c.calcOffset();
        };
      })(this));
      this.c.on("object:moving", (function(_this) {
        return function(event) {};
      })(this));
      this.c.on("object:modified", (function(_this) {
        return function(event) {};
      })(this));
      this.c.on("object:selected", (function(_this) {
        return function(event) {
          return _this.__onObjectSelected(event);
        };
      })(this));
      this.c.on("selection:cleared", (function(_this) {
        return function(event) {};
      })(this));
      this.c.on("mouse:move", (function(_this) {
        return function(event) {
          return _this.getState().mousemove(event);
        };
      })(this));
      this.c.on("mouse:down", (function(_this) {
        return function(event) {
          console.log(event);
          return _this.getState().mousedown(event);
        };
      })(this));
      this.c.on("mouse:up", (function(_this) {
        return function(event) {
          return _this.getState().mouseup(event);
        };
      })(this));
      $(this.c.wrapperEl).on("mousewheel", (function(_this) {
        return function(event) {
          return _this.getState().mousewheel(event);
        };
      })(this));
      return $(this.c.wrapperEl).on("mouseout", (function(_this) {
        return function(event) {
          return _this.getState().mouseout(event);
        };
      })(this));
    },
    resize: function() {
      this.c.setWidth(this.getWidth());
      return this.c.setHeight(this.getHeight());
    },
    setBackgroundImg: function(url) {
      this.surf = Ext.create('GSW.model.Surface');
      this.surf.set('imageURI', this.url);
      this.url = url;
      return fabric.Image.fromURL(url, (function(_this) {
        return function(img) {
          if (_this.img) {
            _this.c.remove(_this.img);
          }
          _this.img = img;
          _this.img.set('selectable', false);
          _this.c.add(_this.img);
          _this.img.moveTo(-1);
          return _this.c.absolutePan({
            x: 0,
            y: 0
          });
        };
      })(this));
    },
    setZoom: function(ratio) {
      var viewportCenter;
      if (ratio > 0.2 && ratio < 10.0) {
        this.zoom = ratio;
        viewportCenter = {
          x: this.c.getWidth() / 2 * this.zoom,
          y: this.c.getHeight() / 2 * this.zoom
        };
        this.c.zoomToPoint(viewportCenter, this.zoom);
        return this.c.fire("zoom");
      }
    },
    moveViewportBy: function(delta) {
      var currentOrigin, newOrigin;
      currentOrigin = this.__viewportOrigin();
      newOrigin = {
        x: currentOrigin.x + delta.x,
        y: currentOrigin.y + delta.y
      };
      return this.c.absolutePan(newOrigin);
    },
    translateToAbsolutePoint: function(point) {
      var currentOrigin, offset, zoom;
      zoom = this.c.getZoom();
      offset = $(this.c.getElement()).offset();
      currentOrigin = this.__viewportOrigin();
      return {
        x: (point.x * zoom - currentOrigin.x) + offset.left,
        y: (point.y * zoom - currentOrigin.y) + offset.top
      };
    },
    getTeiSource: function() {
      var doc, surf;
      doc = $("<sourceDoc></sourceDoc>");
      surf = $("<surface></surface>").attr("facs", this.surf.get('url'));
      this.c.forEachObject(function(obj) {
        if (obj instanceof fabric.Zone) {
          return surf.append($(obj.model.getTeiText()));
        }
      });
      doc.append(surf);
      return doc[0].outerHTML;
    },
    __getTranscriptionPanel: function() {
      return this.up('transcription-panel').child('tategaki-editor');
    },
    __viewportOrigin: function() {
      return {
        x: -this.c.viewportTransform[4],
        y: -this.c.viewportTransform[5]
      };
    },
    __onObjectSelected: function(event) {
      var trclPanel;
      if (event.target instanceof fabric.Zone) {
        trclPanel = this.__getTranscriptionPanel();
        return trclPanel != null ? trclPanel.setZone(event.target.model) : void 0;
      }
    }
  });

}).call(this);
