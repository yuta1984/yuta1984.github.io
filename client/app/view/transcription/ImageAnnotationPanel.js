// Generated by CoffeeScript 1.8.0
(function() {
  Ext.define('GSW.view.transcription.ImageAnnotationPanel', {
    extend: 'Ext.panel.Panel',
    requires: ['GSW.view.transcription.form.ImageAnnotationForm'],
    xtype: 'image-annnotation-panel',
    width: 350,
    height: 120,
    floating: true,
    hidden: true,
    cls: 'image-annotation-panel',
    style: {
      "border-radius": "8px"
    },
    constructor: function(config) {
      var user_id;
      console.log("image annotation", config.model);
      this.callParent(config);
      this.target = config.model.view;
      this.model = config.model;
      this.canvas = config.canvas;
      user_id = this.model.get('user_id');
      this.user = Ext.getStore("GSW.store.UserStore").getById(user_id);
      this.target.on("mouseover", (function(_this) {
        return function() {
          console.log(_this);
          return _this.showPanel();
        };
      })(this));
      this.target.on("mouseout", (function(_this) {
        return function() {
          return _this.startHideTimer();
        };
      })(this));
      return this;
    },
    listeners: {
      afterrender: function(container) {
        if (!this.model) {
          return;
        }
        return this.setHtml("<div class=\"annotation-comment\">\n  <p><b>" + (this.user.get('username')) + "</b> says:</p> \n  <div>" + (this.model.get('annotation')) + "</div>\n</div>\n<div class=\"buttons\">\n  <a href=\"#\" class=\"annotation-button cancel\">Delete</a>\n</div>      ");
      }
    },
    startHideTimer: function() {
      var hidePanel;
      hidePanel = (function(_this) {
        return function() {
          return _this.hidePanel();
        };
      })(this);
      return this.timer = window.setTimeout(hidePanel, 500);
    },
    showPanel: function() {
      var el, origin, rightCenter;
      if (!(this.model && this.user)) {
        return;
      }
      if (this.timer) {
        window.clearTimeout(this.timer);
      }
      rightCenter = this.target.getRightCenter();
      origin = this.canvas.translateToAbsolutePoint(rightCenter);
      this.setPosition(origin.x + 12, origin.y - 50);
      this.show(true);
      el = this.getEl();
      el.setOpacity(0);
      el.setOpacity(1, {
        duration: 300,
        easing: 'ease-in'
      });
      return this.getEl().hover((function(_this) {
        return function() {
          if (_this.timer) {
            return window.clearTimeout(_this.timer);
          }
        };
      })(this));
    },
    hidePanel: function(callback) {
      if (!(this.model && this.user)) {
        return;
      }
      return this.getEl().setOpacity(0, {
        duration: 300,
        easing: 'ease-in',
        listeners: {
          afteranimate: (function(_this) {
            return function() {
              _this.hide();
              if (callback) {
                return callback();
              }
            };
          })(this)
        }
      });
    }
  });

}).call(this);
