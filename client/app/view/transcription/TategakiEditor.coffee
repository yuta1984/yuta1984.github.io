# Generated by CoffeeScript 1.8.0
(->
  Ext.define "GSW.view.transcription.TategakiEditor",
    extend: "Ext.panel.Panel"
    xtype: "tategaki-editor"
    requires: [
      "GSW.view.transcription.form.RubyForm"
      "GSW.view.transcription.ContextMenu"
    ]
    bodyBorder: false
    layout: "fit"
    padding: 0
    margin: 0
    dockedItems: [
      dock: "top"
      xtype: "toolbar"
      margin: 0
      padding: 0
      border: 1
      style:
        "background-color": "rgb(235,235,235)"

      items: [
        {
          iconCls: null
          text: "Text"
          xtype: "splitbutton"
          menu: [
            {
              text: "ルビ"
              value: "ruby"
              handler: (item, e) ->
                @up("tategaki-editor").onMarkupButtonPressed item, e
            }
            {
              text: "追加 (add)"
              value: "add"
              handler: (item, e) ->
                @up("tategaki-editor").onMarkupButtonPressed item, e
            }
            {
              text: "削除 (del)"
              value: "del"
              handler: (item, e) ->
                @up("tategaki-editor").onMarkupButtonPressed item, e
            }
            {
              text: "空白 (gap)"
              value: "gap"
              handler: (item, e) ->
                @up("tategaki-editor").onMarkupButtonPressed item, e
            }
            {
              text: "ハイライト (hi)"
              value: "hi"
              handler: (item, e) ->
                @up("tategaki-editor").onMarkupButtonPressed item, e
            }
            {
              text: "不明瞭 (unclear)"
              value: "unclear"
              handler: (item, e) ->
                @up("tategaki-editor").onMarkupButtonPressed item, e
            }
            {
              text: "選択肢 (choice)"
              value: "choice"
              handler: (item, e) ->
                @up("tategaki-editor").onMarkupButtonPressed item, e
            }
            {
              text: "破損 (damage)"
              value: "damage"
              handler: (item, e) ->
                @up("tategaki-editor").onMarkupButtonPressed item, e
            }
          ]
        }
        {
          iconCls: null
          text: "Dates/Names"
          xtype: "splitbutton"
          menu: [
            {
              text: "日付 (date)"
              value: "date"
              handler: (item, e) ->
                @up("tategaki-editor").onMarkupButtonPressed item, e
            }
            {
              text: "団体・組織名 (orgName)"
              value: "orgName"
              handler: (item, e) ->
                @up("tategaki-editor").onMarkupButtonPressed item, e
            }
            {
              text: "人名 (persName)"
              value: "persName"
              handler: (item, e) ->
                @up("tategaki-editor").onMarkupButtonPressed item, e
            }
            {
              text: "役職名 (roleName)"
              value: "roleName"
              handler: (item, e) ->
                @up("tategaki-editor").onMarkupButtonPressed item, e
            }
            {
              text: "場所名 (placeName)"
              value: "placeName"
              handler: (item, e) ->
                @up("tategaki-editor").onMarkupButtonPressed item, e
            }
            {
              text: "地域・地方名 (region)"
              value: "region"
              handler: (item, e) ->
                @up("tategaki-editor").onMarkupButtonPressed item, e
            }
          ]
        }
        {
          iconCls: null
          text: "Misk"
          xtype: "splitbutton"
          menu: [
            {
              text: "リンク (link)"
              value: "link"
            }
            {
              text: "外字 (gaiji)"
              value: "gaiji"
            }
          ]
        }
        "-"
        {
          iconCls: null
          xtype: "button"
          text: "Delete markup"
        }
      ]
    ]
    constructor: (config) ->
      @callParent arguments

    listeners:
      afterrender: ->
        @buildEditor()
        @updateText()

    updateText: ->
      image = @up('transcription-panel').getImage()
      text = image.get('transcription')
      if text.length is 0
        text = "<div class='tategaki-column'></div>" 
      @source text

    readyToSave: ->
      unless @waitingUpdate
        @waitingUpdate = true
        setTimeout =>
          @saveText()
          @waitingUpdate=false
        , 2000

    saveText: ->
      source = @getSource()
      image = @up('transcription-panel').getImage()
      image.update('transcription', source)

    reload: ->
      image = @up('transcription-panel').getImage()
      @source image.get('transcription')

    buildEditor: ->
      iframeId = undefined
      iframeId = "iframe-" + @getId()
      @setHtml "<iframe id='" + iframeId + "' width='100%' height='100%' style='border: none;'></iframe>"
      @editor = new window.TategakiEditor(iframeId)
      $(".tategaki-editor", @editor.doc).css "height", "100%"      
      @editor.on "element:selected", ->

      @editor.on "change", =>
        @readyToSave()

      @editor.on "contextmenu", ((_this) ->
        (e) ->
          offset = undefined
          if _this.editor.selectedElement()
            _this.menu = Ext.create("GSW.view.transcription.ContextMenu",
              editor: _this
            )
            offset = _this.editor.getIframeOffset()
            _this.menu.showAt offset.left + e.clientX, offset.top + e.clientY
            e.preventDefault()
      )(this)
      @editor.on "mousedown", ((_this) ->
        (e) ->
          _this.menu.close()  if _this.menu
      )(this)

    source: (s) ->
      @editor.source s

    getSource: ->
      @editor.getHtmlSource()

    getTeiSource: ->
      html = undefined
      html = @getSource()
      $ html

    # saveText: ->
    #   @zone.setHtmlText @editor.getHtmlSource()  if @zone

    # setZone: (zone) ->
    #   @zone = zone
    #   @source zone.getHtmlText()

    markup: (item, attrs) ->
      teiAttrs = undefined
      attrs = {}  unless attrs?
      teiAttrs = {}
      teiAttrs["type"] = item.value
      teiAttrs["class"] = "tei-element tei:" + item.value
      @editor.markup "span", teiAttrs

    ruby: (text) ->
      @editor.ruby text,
        class: "tei-element tei:ruby"


    openAnnotationDialog: ->
      Ext.Msg.alert "アノテーション対象が選択されていません"  unless @editor.selectedElement()

    onMarkupButtonPressed: (item, e) ->
      form = undefined
      console.log item
      switch item.value
        when "ruby"
          form = Ext.create("GSW.view.transcription.form.RubyForm",
            editor: this
          )
          form.show()

  return
).call this


