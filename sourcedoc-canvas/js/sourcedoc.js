// Generated by CoffeeScript 1.7.1
(function() {
  var SourceDocCanvas, Surface, Zone,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.canvas = SourceDocCanvas;

  Surface = (function() {
    function Surface(imgURL, config) {
      if (config == null) {
        config = {};
      }
    }

    return Surface;

  })();

  Zone = (function(_super) {
    __extends(Zone, _super);

    function Zone() {
      Zone.__super__.constructor.call(this);
    }

    return Zone;

  })(fabric.Rect);

  window.Zone = Zone;

  SourceDocCanvas = (function() {
    function SourceDocCanvas(canvasId, config) {
      var rect;
      if (config == null) {
        config = {};
      }
      this.c = new fabric.CanvasWithViewport(canvasId);
      this.bindEventListeners();
      this.setBackgroundImg("http://www.ancestorsremembered.com/Capt%20Dave/hannah_handwriting.jpg");
      rect = new fabric.Rect({
        width: 50,
        height: 50,
        left: 50,
        top: 50,
        strokeWidth: 1,
        stroke: 'red',
        fill: "rgba(0,0,0,0)"
      });
      this.c.add(rect);
    }

    SourceDocCanvas.prototype.bindEventListeners = function() {
      this.c.on("object:scaling", (function(_this) {
        return function(e) {
          var activeObject;
          activeObject = _this.c.getActiveObject();
          console.log(activeObject.scaleX, activeObject.scaleY);
          activeObject.set('strokeWidth', 1 / activeObject.scaleX);
          return console.log(activeObject.strokeWidth);
        };
      })(this));
      this.c.on("object:moving", (function(_this) {
        return function(e) {};
      })(this));
      this.c.on("object:modified", (function(_this) {
        return function(e) {};
      })(this));
      this.c.on("object:selected", (function(_this) {
        return function(e) {
          return console.log(e);
        };
      })(this));
      this.c.on("selection:cleared", (function(_this) {
        return function(e) {};
      })(this));
      this.c.on("mouse:move", (function(_this) {
        return function(e) {};
      })(this));
      this.c.on("mouse:up", (function(_this) {
        return function(e) {
          return console.log("mouseup");
        };
      })(this));
      this.c.on("mouse:down", (function(_this) {
        return function(e) {
          return console.log("mousedown");
        };
      })(this));
      $(this.c.wrapperEl).on("mousewheel", (function(_this) {
        return function(e) {
          var delta;
          delta = e.originalEvent.wheelDelta / 1000;
          if ((_this.c.viewport.zoom > 0.5 && delta < 0) || (_this.c.viewport.zoom < 10.0 && delta > 0)) {
            _this.c.setZoom(_this.c.viewport.zoom + delta);
          }
          e.stopPropagation();
          return e.preventDefault();
        };
      })(this));
      $(this.c.wrapperEl).on("mousedown", (function(_this) {
        return function(e) {
          return console.log("mousedown on el");
        };
      })(this));
      return $(this.c.wrapperEl).on("mouseup", (function(_this) {
        return function(e) {
          return console.log("mouseup on el");
        };
      })(this));
    };

    SourceDocCanvas.prototype.loadSurface = function(surface) {};

    SourceDocCanvas.prototype.setBackgroundImg = function(url) {
      return fabric.Image.fromURL(url, (function(_this) {
        return function(img) {
          if (_this.img) {
            _this.c.remove(_this.img);
          }
          _this.img = img;
          _this.img.set('selectable', false);
          _this.c.add(_this.img);
          return _this.img.moveTo(-1);
        };
      })(this));
    };

    SourceDocCanvas.prototype.setGrabMode = function(bool) {
      if (bool == null) {
        bool = true;
      }
      this.c.isGrabMode = bool;
      return console.log("grabmode: " + bool);
    };

    SourceDocCanvas.prototype.isGrabMode = function() {
      return this.c.isGrabMode;
    };

    SourceDocCanvas.prototype.zoom = function(ratio) {
      return this.c.setZoom(this.c.viewport.zoom * ratio);
    };

    return SourceDocCanvas;

  })();

  window.SourceDocCanvas = SourceDocCanvas;

}).call(this);
